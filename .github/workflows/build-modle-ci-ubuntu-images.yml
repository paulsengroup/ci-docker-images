# Copyright (C) 2022 Roberto Rossini (roberros@uio.no)
# SPDX-License-Identifier: MIT

name: "Build Ubuntu Docker for MoDLE CI"
on:
  push:
    branches: [ main, devel, ci-devel ]
    paths:
      - ".github/workflows/build-modle-ci-ubuntu-images.yml"
      - "ubuntu-modle-ci.Dockerfile"
  pull_request:
    branches: [ main, devel, ci-devel ]
    paths:
      - ".github/workflows/build-modle-ci-ubuntu-images.yml"
      - "ubuntu-modle-ci.Dockerfile"
  workflow_run:
    workflows: [ "Build Ubuntu Docker images for CXX development/testing" ]
    branches: [ main, devel, ci-devel ]
    types: [ completed ]

jobs:
  build-image-ubuntu:
    runs-on: ubuntu-latest
    #if: |
    #  github.event_name != 'workflow_run' ||
    #  github.event.workflow_run.conclusion == 'success'
    strategy:
      fail-fast: false
      matrix:
        include:
          - { compiler: gcc-7,     os: 'ubuntu-20.04', image-version: 'latest' }
          - { compiler: gcc-8,     os: 'ubuntu-20.04', image-version: 'latest' }
          - { compiler: gcc-9,     os: 'ubuntu-22.04', image-version: 'latest' }
          - { compiler: gcc-10,    os: 'ubuntu-22.04', image-version: 'latest' }
          - { compiler: gcc-11,    os: 'ubuntu-22.04', image-version: 'latest' }
          - { compiler: gcc-12,    os: 'ubuntu-22.04', image-version: 'latest' }
          - { compiler: clang-7,   os: 'ubuntu-20.04', image-version: 'latest' }
          - { compiler: clang-8,   os: 'ubuntu-20.04', image-version: 'latest' }
          - { compiler: clang-9,   os: 'ubuntu-20.04', image-version: 'latest' }
          - { compiler: clang-10,  os: 'ubuntu-20.04', image-version: 'latest' }
          - { compiler: clang-11,  os: 'ubuntu-22.04', image-version: 'latest' }
          - { compiler: clang-12,  os: 'ubuntu-22.04', image-version: 'latest' }
          - { compiler: clang-13,  os: 'ubuntu-22.04', image-version: 'latest' }
          - { compiler: clang-14,  os: 'ubuntu-22.04', image-version: 'latest' }
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Extract compiler name and version
        id: compiler-info
        run: |
          compiler_name="$(echo "${{ matrix.compiler}}" | grep -oP '^[[:alnum:]]+-' | tr -d '-')"
          compiler_version="$(echo "${{ matrix.compiler}}" | grep -oP '\-[.[:alnum:]]+$' | tr -d '-')"
          echo "::set-output name=name::$compiler_name"
          echo "::set-output name=version::$compiler_version"

      - name: Generate base image label
        id: generate-base-img-label
        run: |
          label="ghcr.io/${{ github.repository }}/${{ matrix.os }}-cxx-${{ matrix.compiler }}:${{ matrix.image-version }}"
          
          echo "::set-output name=label::$label"

      - name: Generate image name
        id: generate-img-name
        run: |
          name="ghcr.io/${{ github.repository }}/modle/${{ matrix.os }}-cxx-${{ matrix.compiler }}"
          
          echo "::set-output name=name::$name"

      - name: Generate cache key
        id: cache-key
        run: |
          os="${{ matrix.os }}"
          compiler="${{ matrix.compiler }}"
          cmake_ver="cmake-${{ matrix.cmake }}"
          conan_ver="conan-${{ matrix.conan }}"
          
          echo "::set-output name=key::modle-ci-$os-$compiler-$cmake_ver-$conan_ver"

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ steps.generate-img-name.outputs.name }}
          flavor: |
            latest=true
          tags: |
            type=raw,value=${{ matrix.image-version }}

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build Docker image and push to registries
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: ${{ github.event_name != 'pull_request' }}
          file: ubuntu-modle-ci.Dockerfile
          cache-from: type=gha,scope=${{ steps.cache-key.outputs.key }}
          cache-to: type=gha,mode=min,scope=${{ steps.cache-key.outputs.key }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BASE_OS=${{ steps.generate-base-img-label.outputs.label }}
            COMPILER_NAME=${{ steps.compiler-info.outputs.name }}
            COMPILER_VERSION=${{ steps.compiler-info.outputs.version }}
            CMAKE_VERSION=${{ matrix.cmake }}
            CONAN_VERSION=${{ matrix.conan }}

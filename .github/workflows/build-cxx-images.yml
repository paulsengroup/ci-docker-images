# Copyright (C) 2022 Roberto Rossini (roberros@uio.no)
# SPDX-License-Identifier: MIT

name: "Build Docker images for CXX development/testing"
on:
  push:
    branches: [ main, devel, ci-devel ]
    paths:
      - ".github/workflows/build-cxx-images.yml"
      - "assets/settings.yml"
      - "dockerfiles/alpine-cxx.Dockerfile"
      - "dockerfiles/ubuntu-cxx.Dockerfile"
      - "scripts/generate_job_matrix.py"
  pull_request:
    branches: [ main, devel, ci-devel ]
    paths:
      - ".github/workflows/build-cxx-images.yml"
      - "assets/settings.yml"
      - "dockerfiles/alpine-cxx.Dockerfile"
      - "dockerfiles/ubuntu-cxx.Dockerfile"
      - "scripts/generate_job_matrix.py"
  workflow_dispatch:

  schedule:
    # Run weekly
    - cron: "15 0 * * 0"

defaults:
  run:
    shell: bash

permissions:
  contents: read
  packages: write

# https://stackoverflow.com/a/72408109
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  matrix-factory:
    name: Generate job matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.generate-matrix.outputs.matrix }}
      matrix-amd64: ${{ steps.generate-matrix.outputs.matrix-amd64 }}
      matrix-arm64: ${{ steps.generate-matrix.outputs.matrix-arm64 }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Generate matrix
        id: generate-matrix
        run: |
          scripts/generate_job_matrix.py \
            --include-alpine \
            --include-ubuntu

  generate-tags:
    name: Generate Image tags
    runs-on: ubuntu-latest
    outputs:
      commit-date: ${{ steps.metadata.outputs.commit-date }}
      build-date: ${{ steps.metadata.outputs.build-date }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Extract metadata
        id: metadata
        run: |
          commit_date="$(git show -s --format='%as' HEAD | tr -d '-')"
          build_date="$(date +%Y%m%d)"

          echo "commit-date=$commit_date" | tee -a "$GITHUB_OUTPUT"
          echo "build-date=$build_date" | tee -a "$GITHUB_OUTPUT"

  build-dockerfile:
    name: Build Dockerfile
    needs:
      - matrix-factory
      - generate-tags
    outputs:
      image: ${{ steps.metadata.outputs.image }}
      tag: ${{ steps.metadata.outputs.build-date }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix-factory.outputs.matrix) }}
    runs-on: ${{ matrix.runner }}

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Extract metadata
        id: metadata
        run: |
          image='ghcr.io/${{ github.repository }}/${{ matrix.os-name }}-${{ matrix.os-version }}-cxx'
          if [ -n '${{ matrix.compiler-name }}' ]; then
            image+="-${{ matrix.compiler-name }}-${{ matrix.compiler-version }}"
          fi

          echo "commit-date=${{ needs.generate-tags.outputs.commit-date }}" | tee -a "$GITHUB_OUTPUT"
          echo "build-date=${{ needs.generate-tags.outputs.build-date }}" | tee -a "$GITHUB_OUTPUT"
          echo "image=$image" | tee -a "$GITHUB_OUTPUT"

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.metadata.outputs.image }}
          flavor: latest=true
          tags: type=raw,value=${{ steps.metadata.outputs.build-date }}

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v6
        id: build-image
        with:
          load: true
          push: false
          file: dockerfiles/${{ matrix.os-name }}-cxx.Dockerfile
          labels: ${{ steps.meta.outputs.labels }}
          platforms: ${{ matrix.platform }}
          tags: tmp:latest
          build-args: |
            BASE_OS=${{ matrix.os-name }}:${{ matrix.os-version }}
            COMPILER_NAME=${{ matrix.compiler-name }}
            COMPILER_VERSION=${{ matrix.compiler-version }}
            CMAKE_VERSION=${{ matrix.cmake-version }}
            CONAN_VERSION=${{ matrix.conan-version }}
            PYTHON_VERSION=${{ matrix.python-version }}

      - name: Test Docker image
        run: test/test_docker_image.sh tmp:latest

      - name: Push image to registries
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v6
        id: push-image
        with:
          context: ${{ github.workspace }}
          push: true
          file: dockerfiles/${{ matrix.os-name }}-cxx.Dockerfile
          labels: ${{ steps.meta.outputs.labels }}
          platforms: ${{ matrix.platform }}
          outputs: type=image,"name=${{ steps.metadata.outputs.image }}",push-by-digest=true,name-canonical=true,push=true
          build-args: |
            BASE_OS=${{ matrix.os-name }}:${{ matrix.os-version }}
            COMPILER_NAME=${{ matrix.compiler-name }}
            COMPILER_VERSION=${{ matrix.compiler-version }}
            CMAKE_VERSION=${{ matrix.cmake-version }}
            CONAN_VERSION=${{ matrix.conan-version }}
            PYTHON_VERSION=${{ matrix.python-version }}

      - name: Export digest
        if: github.event_name != 'pull_request'
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.push-image.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Generate artifact name
        if: github.event_name != 'pull_request'
        id: generate-artifact-name
        run: |
          echo 'name=${{ steps.metadata.outputs.image }}-${{ matrix.platform }}' |
            sed 's|[^[:alnum:]=-]\+|-|g' |
            tee -a $GITHUB_OUTPUT

      - name: Upload digest
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ steps.generate-artifact-name.outputs.name }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  merge-images:
    name: Merge images
    runs-on: ubuntu-latest
    needs:
      - matrix-factory
      - generate-tags
      - build-dockerfile
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix-factory.outputs.matrix-amd64) }}
    if: github.event_name != 'pull_request'
    steps:
      - name: Collect metadata
        id: metadata
        run: |
          image='ghcr.io/${{ github.repository }}/${{ matrix.os-name }}-${{ matrix.os-version }}-cxx'
          if [ -n '${{ matrix.compiler-name }}' ]; then
            image+="-${{ matrix.compiler-name }}-${{ matrix.compiler-version }}"
          fi

          artifact_name="$(echo "$image" | sed 's|[^[:alnum:]=-]\+|-|g')"
          tags='${{ needs.generate-tags.outputs.build-date }}'

          echo "image=$image" | tee -a "$GITHUB_OUTPUT"
          echo "artifact-name=$artifact_name" | tee -a $GITHUB_OUTPUT
          echo "tags=$tags" | tee -a $GITHUB_OUTPUT

      - name: Download digests
        uses: actions/download-artifact@v5
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-${{ steps.metadata.outputs.artifact-name }}-*
          merge-multiple: true

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          flavor: latest=true
          images: ${{ steps.metadata.outputs.image }}
          tags: ${{ steps.metadata.outputs.tags }}

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          # https://docs.docker.com/build/ci/github-actions/multi-platform/#distribute-build-across-multiple-runners
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf ' ${{ steps.metadata.outputs.image }}@sha256:%s ' *)

      - name: Inspect image
        run: docker buildx imagetools inspect ${{ steps.metadata.outputs.image }}:${{ steps.meta.outputs.version }}


  build-cxx-ubuntu-images-status-check:
    name: Status Check (Build Docker images for CXX development/testing)
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs:
      - matrix-factory
      - build-dockerfile
      - merge-images

    steps:
      - name: Collect job results
        if: |
          needs.matrix-factory.result != 'success'   ||
          needs.build-dockerfile.result != 'success' ||
          (
            needs.merge-images.result != 'success'   &&
            needs.merge-images.result != 'skipped'
          )
        run: exit 1
